// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  apiKeys       String         @default("")
  projects      Project[]      @relation("OwnerProjects")
  collaborators Collaborator[]
  tasks         Task[]         @relation("AssignedTasks")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}


model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  owner         User           @relation("OwnerProjects", fields: [ownerId], references: [id])
  ownerId       String
  tasks         Task[]
  collaborators Collaborator[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Task {
  id           String   @id @default(uuid())
  title        String
  description  String?
  status       String   @default("pending")
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  assignedTo   User?    @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Collaborator {
  iid       String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  role      String   @default("member")
  joinedAt  DateTime @default(now())

  @@unique([userId, projectId])
}
